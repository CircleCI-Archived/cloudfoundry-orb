description: Execute a blue/green deploy  in a single job. Expects either build_steps or workspace_path for assets to deploy.
parameters:
  docker_image:
    type: string
    default: 'circleci/node:10'
    description: "The label:tag of a docker image to use."
  build_steps:
    type: steps
    default: []
    description: "Steps to generate artifacts. Alternately provide `workspace_path`"
  workspace_path:
    type: string
    default: ''
    description: "The key of a workflow workspace which contains artifact. Alternately provide `build_steps`"
  validate_steps:
    type: steps
    default: []
    description: "Optional steps to run between the dark and live deployments."
  # to pass to commands
  endpoint:
    type: string
    description: The domain of the Cloud FOundry runtime API endpoint. Defaults to https://api.run.pivotal.io
    default: https://api.run.pivotal.io
  org:
    type: string
    description: Cloud Foundry Org to target
  space:
    type: string
    description: Cloud Foundry space to target
  appname:
    type: string
    description: App Name
  manifest:
    type: string
    description: The Cloud Foundry manifest for this environment
  package:
    type: string
    description: path to the asset/package to push
  domain:
    type: string
    description: Cloud Foundry domain (a "dark" sub-domain will be used on this.)
  dark_subdomain:
    type: string
    description: Cloud Foundry dark domain to prefix domain (i.e. <subdomain>.<domain>, defaults to "dark")
    default: dark
  live_subdomain:
    type: string
    description: Cloud Foundry live subdomain to prefix domain (i.e. <subdomain>.<domain>, defaults to "wwww")
    default: www
steps:
  - checkout
  - when:
      condition: <<parameters.build_steps>> 
      steps: << parameters.build_steps >>
  - when:
      condition: <<parameters.workspace_path>> 
      steps: 
        - attach_workspace:
            at: <<parameters.workspace_path>> 
  - install:
      endpoint: <<parameters.endpoint>>
      org: <<parameters.org>>
      space: <<parameters.space>>
  - dark_deploy:
      appname: <<parameters.appname>>
      manifest: <<parameters.manifest>>
      package: <<parameters.package>>
      domain: <<parameters.domain>>
      dark_subdomain: <<parameters.dark_subdomain>>
  - when:
      condition: <<parameters.validate_steps>> 
      steps: << parameters.validate_steps >>
  - live_deploy:
      appname: <<parameters.appname>>
      domain: <<parameters.domain>>
      live_subdomain: <<parameters.live_subdomain>>
docker:
- image: <<parameters.docker_image>>