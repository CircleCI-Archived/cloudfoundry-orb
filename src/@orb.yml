version: 2.1

description: |
  Push and deploy applications to Cloud Foundry

examples:
  push_existing_assets:
    description: |
      Deploy with artifacts created in previous CircleCI jobs
    usage:
      version: 2.1

      orbs:
        cloudfoundry: circleci/cloudfoundry@1.0

      workflows:
        version: 2
        build-deploy:
          jobs:
            - build
            - cloudfoundry/push:
                requires:
                  - build
                appname: your-app
                org: your-org
                space: your-space
                workspace_path: # path to workspace containing your application assets
                manifest: # path to manifest.yml file
                package: # path to application package

      jobs:
        build:
          machine: true
          steps:
            - checkout
            # your custom build job...

  build_and_push:
    description: |
      Build and deploy your application in a single job.
    usage:
      version: 2.1

      orbs:
        cloudfoundry: circleci/cloudfoundry@1.0

      workflows:
        version: 2
        build-deploy:
          jobs:
            - cloudfoundry/push:
                appname: your-app
                org: your-org
                space: your-space
                build_steps:
                  - run: # your build steps
                  - run: # you can have more, too
                manifest: # path to manifest.yml file
                package: # path to application package

  blue_green_deploy:
    description: |
      A blue-green deployment with a manual approval step
    usage:
      version: 2.1

      orbs:
        cloudfoundry: circleci/cloudfoundry@1.0

      workflows:
        build_deploy:
          jobs:
            - cloudfoundry/dark_deploy:
                context: your-context
                appname: your-app
                org: your-org
                space: your-space
                build_steps:
                  - run: # your build steps
                  - run: # you can have more, too
                manifest: # path to manifest.yml file
                package: # path to application package
                domain: your-domain
            - hold:
                type: approval
                requires:
                  - cloudfoundry/dark_deploy
            - cloudfoundry/live_deploy:
                requires:
                  - hold
                context: your-context
                appname: your-app
                org: your-org
                space: your-space
                domain: your-domain

jobs:
  push:
    description: Execute a simple push in a single job. Expects either build_steps or workspace_path for assets to deploy.
    parameters:
      build_steps:
        type: steps
        default: []
        description: "Steps to generate application package or files. Alternately provide `workspace_path`"
      workspace_path:
        type: string
        default: ''
        description: "The key of a workflow workspace which contains artifact. Alternately provide `build_steps`"
      # to pass to commands
      endpoint:
        type: string
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults to https://api.run.pivotal.io
        default: https://api.run.pivotal.io
      org:
        type: string
        description: Cloud Foundry 'Org' to target
      space:
        type: string
        description: Cloud Foundry 'Space' to target
      appname:
        type: string
        description: App Name
      manifest:
        type: string
        description: The Cloud Foundry manifest for this environment
      package:
        type: string
        description: path to the package/files to push if not the current directory
        default: ""
    steps:
      - checkout
      - when:
          condition: <<parameters.build_steps>>
          steps: << parameters.build_steps >>
      - when:
          condition: <<parameters.workspace_path>>
          steps:
            - attach_workspace:
                at: <<parameters.workspace_path>>
      - install:
          endpoint: <<parameters.endpoint>>
          org: <<parameters.org>>
          space: <<parameters.space>>
      - push:
          appname: <<parameters.appname>>
          manifest: <<parameters.manifest>>
          package: <<parameters.package>>
    docker:
    - image: circleci/node:10


  blue_green:
    description: Execute a blue/green deploy  in a single job. Expects either build_steps or workspace_path for assets to deploy.
    parameters:
      build_steps:
        type: steps
        default: []
        description: "Steps to generate application package or files. Alternately provide `workspace_path`"
      workspace_path:
        type: string
        default: ''
        description: "The key of a workflow workspace which contains artifact. Alternately provide `build_steps`"
      validate_steps:
        type: steps
        default: []
        description: "Optional steps to run between the dark and live deployments."
      # to pass to commands
      endpoint:
        type: string
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults to https://api.run.pivotal.io
        default: https://api.run.pivotal.io
      org:
        type: string
        description: Cloud Foundry Org to target
      space:
        type: string
        description: Cloud Foundry space to target
      appname:
        type: string
        description: App Name
      manifest:
        type: string
        description: The Cloud Foundry manifest for this environment
      package:
        type: string
        description: path to the asset/package to push
      domain:
        type: string
        description: Cloud Foundry domain registered to handle routes for this space (a "dark" or "live" sub-domain will be used in conjunction with this, i.e. <dark_subdomain>.<domain>)
      dark_subdomain:
        type: string
        description: Cloud Foundry dark domain to prefix domain (i.e. <dark_subdomain>.<domain>, defaults to "dark")
        default: dark
      live_subdomain:
        type: string
        description: Cloud Foundry live subdomain to prefix domain (i.e. <live_subdomain>.<domain>, defaults to "www")
        default: www
    steps:
      - checkout
      - when:
          condition: <<parameters.build_steps>>
          steps: << parameters.build_steps >>
      - when:
          condition: <<parameters.workspace_path>>
          steps:
            - attach_workspace:
                at: <<parameters.workspace_path>>
      - install:
          endpoint: <<parameters.endpoint>>
          org: <<parameters.org>>
          space: <<parameters.space>>
      - dark_deploy:
          appname: <<parameters.appname>>
          manifest: <<parameters.manifest>>
          package: <<parameters.package>>
          domain: <<parameters.domain>>
          dark_subdomain: <<parameters.dark_subdomain>>
      - when:
          condition: <<parameters.validate_steps>>
          steps: << parameters.validate_steps >>
      - live_deploy:
          appname: <<parameters.appname>>
          domain: <<parameters.domain>>
          live_subdomain: <<parameters.live_subdomain>>
    docker:
    - image: circleci/node:10

  dark_deploy:
    description: Execute a dark (blue) deploy  in a single job. Expects either build_steps or workspace_path for assets to deploy.
    parameters:
      build_steps:
        type: steps
        default: []
        description: "Steps to generate artifacts. Alternately provide `workspace_path`"
      workspace_path:
        type: string
        default: ''
        description: "The key of a workflow workspace which contains artifact. Alternately provide `build_steps`"
      validate_steps:
        type: steps
        default: []
        description: "Optional steps to run between the dark and live deployments."
      # to pass to commands
      endpoint:
        type: string
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults to https://api.run.pivotal.io
        default: https://api.run.pivotal.io
      org:
        type: string
        description: Cloud Foundry Org to target
      space:
        type: string
        description: Cloud Foundry space to target
      appname:
        type: string
        description: App Name
      manifest:
        type: string
        description: The Cloud Foundry manifest for this environment
      package:
        type: string
        description: path to the asset/package to push
      domain:
        type: string
        description: Cloud Foundry domain registered to handle routes for this space (a "dark" or "live" sub-domain will be used in conjunction with this, i.e. <dark_subdomain>.<domain>)
      dark_subdomain:
        type: string
        description: Cloud Foundry dark domain to prefix domain (i.e. <dark_subdomain>.<domain>, defaults to "dark")
        default: dark
    steps:
      - checkout
      - when:
          condition: <<parameters.build_steps>>
          steps: << parameters.build_steps >>
      - when:
          condition: <<parameters.workspace_path>>
          steps:
            - attach_workspace:
                at: <<parameters.workspace_path>>
      - install:
          endpoint: <<parameters.endpoint>>
          org: <<parameters.org>>
          space: <<parameters.space>>
      - dark_deploy:
          appname: <<parameters.appname>>
          manifest: <<parameters.manifest>>
          package: <<parameters.package>>
          domain: <<parameters.domain>>
          dark_subdomain: <<parameters.dark_subdomain>>
      - when:
          condition: <<parameters.validate_steps>>
          steps: << parameters.validate_steps >>
    docker:
    - image: circleci/node:10


  live_deploy:
    description: Execute final URL remap and application name cleanup.
    parameters:
      validate_steps:
        type: steps
        default: []
        description: "Optional steps to run before remapping URLs."
      endpoint:
        type: string
        description: The domain of the Cloud FOundry runtime API endpoint. Defaults to https://api.run.pivotal.io
        default: https://api.run.pivotal.io
      org:
        type: string
        description: Cloud Foundry Org to target
      space:
        type: string
        description: Cloud Foundry space to target
      appname:
        type: string
        description: App Name
      domain:
        type: string
        description: Cloud Foundry domain registered to handle routes for this space (a "dark" or "live" sub-domain will be used in conjunction with this, i.e. <live_subdomain>.<domain>)
      live_subdomain:
        type: string
        description: Cloud Foundry dark domain to prefix domain (i.e. <live_subdomain>.<domain>, defaults to "www")
        default: www
    steps:
      - install:
          endpoint: <<parameters.endpoint>>
          org: <<parameters.org>>
          space: <<parameters.space>>
      - when:
          condition: <<parameters.validate_steps>>
          steps: << parameters.validate_steps >>
      - live_deploy:
          appname: <<parameters.appname>>
          domain: <<parameters.domain>>
          live_subdomain: <<parameters.live_subdomain>>
    docker:
    - image: circleci/node:10


commands:
  install:
    description: Installs and authenticates with the latest CLI version if not present.
    parameters:
      endpoint:
        type: string
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults to https://api.run.pivotal.io
        default: https://api.run.pivotal.io
      org:
        type: string
        description: Cloud Foundry org to target
      space:
        type: string
        description: Cloud Foundry space to target
    steps:
      - run:
          name: Setup CF CLI
          command: |
            : "${CF_USERNAME?Cloud Foundry username and password must be set as Environment variables before running this command.}"
            : "${CF_PASSWORD?Cloud Foundry username and password must be set as Environment variables before running this command.}"
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api "<<parameters.endpoint>>"
            cf auth "$CF_USERNAME" "$CF_PASSWORD"
            cf target -o "<<parameters.org>>" -s "<<parameters.space>>"

  push:
    parameters:
      appname:
        type: string
        description: App Name
      manifest:
        type: string
        description: The Cloud Foundry manifest for this environment
      package:
        type: string
        description: path to the asset/package to push
        default: ""
    steps:
      - run:
          name: Cloud Foundry Push
          command: |
            #push no start so we can set envars
            cf push --no-start "<<parameters.appname>>" -f "<<parameters.manifest>>" <<# parameters.package>> -p "<<parameters.package>>" <</ parameters.package>>
            cf set-env "<<parameters.appname>>" CIRCLE_BUILD_NUM "${CIRCLE_BUILD_NUM}"
            cf set-env "<<parameters.appname>>" CIRCLE_SHA1 "${CIRCLE_SHA1}"
            cf set-env "<<parameters.appname>>" CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID}"
            cf set-env "<<parameters.appname>>" CIRCLE_PROJECT_USERNAME "${CIRCLE_PROJECT_USERNAME}"
            cf set-env "<<parameters.appname>>" CIRCLE_PROJECT_REPONAME "${CIRCLE_PROJECT_REPONAME}"
            #now start
            cf start "<<parameters.appname>>"


  dark_deploy:
    parameters:
      appname:
        type: string
        description: App Name
      manifest:
        type: string
        description: The Cloud Foundry manifest for this environment
      package:
        type: string
        description: path to the asset/package to push
      domain:
        type: string
        description: Cloud Foundry domain registered to handle routes for this space (a "dark" or "live" sub-domain will be used in conjunction with this, i.e. <dark_subdomain>.<domain>)
      dark_subdomain:
        type: string
        description: Cloud Foundry dark domain to prefix domain (i.e. <dark_subdomain>.<domain>, defaults to "dark")
        default: dark
    steps:
      - run:
          name: Cloud Foundry Dark Deployment
          command: |
            cf push --no-start "<<parameters.appname>>-dark" -f "<<parameters.manifest>>" -p "<<parameters.package>>"<<# parameters.dark_subdomain>> -n "<<parameters.dark_subdomain>>"<</ parameters.dark_subdomain>> -d "<<parameters.domain>>"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_BUILD_NUM "${CIRCLE_BUILD_NUM}"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_SHA1 "${CIRCLE_SHA1}"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID}"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_PROJECT_USERNAME "${CIRCLE_PROJECT_USERNAME}"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_PROJECT_REPONAME "${CIRCLE_PROJECT_REPONAME}"

            # Push as "dark" instance (URL in manifest)
            cf start "<<parameters.appname>>-dark"
            # Ensure dark route is exclusive to dark app
            cf unmap-route "<<parameters.appname>>" "<<parameters.domain>>"<<# parameters.dark_subdomain>> -n "<<parameters.dark_subdomain>>"<</ parameters.dark_subdomain>> || echo "Already exclusive"


  live_deploy:
    parameters:
      appname:
        type: string
        description: App Name
      domain:
        type: string
        description: Cloud Foundry domain (a "dark" sub-domain will be used on this.)
      live_subdomain:
        type: string
        description: Cloud Foundry live subdomain to prefix domain (i.e. <live_subdomain>.<domain>, defaults to "wwww")
        default: www
    steps:
      - run:
          name: Cloud Foundry - Re-route live Domain
          command: |
            # Send "real" url to new version
            cf map-route "<<parameters.appname>>-dark" "<<parameters.domain>>"<<# parameters.live_subdomain>> -n "<<parameters.live_subdomain>>"<</ parameters.live_subdomain>>
            # Stop sending traffic to previous version
            cf unmap-route "<<parameters.appname>>" "<<parameters.domain>>"<<# parameters.live_subdomain>> -n "<<parameters.live_subdomain>>"<</ parameters.live_subdomain>>
            # stop previous version
            cf stop "<<parameters.appname>>"
            # delete previous version
            cf delete "<<parameters.appname>>" -f
            # Switch name of "dark" version to claim correct name
            cf rename "<<parameters.appname>>-dark" "<<parameters.appname>>"
